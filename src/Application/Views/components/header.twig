<nav role="navigation" class="navbar navbar-expand-lg fixed-top bg-primary" aria-label="{{ 'HeaderAriaLabel'|trans|raw }}">
    <div class="container p-0">
        <div class="d-inline-flex">
            <button type="button" class="btn btn-abs-nav btn-nav me-1 ms-1" data-bs-toggle="collapse"
                    data-bs-target="#verticalNavbar" aria-expanded="false" aria-controls="verticalNavbar">
                <span class="mdi mdi-menu span-nav"></span>
            </button>
            <a class="nav-link active d-flex me-1" href=".">
                <img src="/assets/img/appImg.jpg" alt="Logo" class="rounded-circle logo">
                <p class="appName">{% trans %}AppName{% endtrans %}</p>
            </a>
        </div>

        <div class="d-inline-flex">
            <div class="collapse collapse-horizontal" id="collapseSearch">
                <form class="dropdown input-group flex-nowrap container-searchbar" role="search">
                    <div class="d-flex align-items-center searchbar">
                        <div id="searchbar-assign" class="searchbar-category-container">
                            <div id="assign-button" class="searchbar-category-button" data-bs-toggle="dropdown" aria-expanded="false">
                                <small class="form-text text-muted">{% trans %}SearchAssigned{% endtrans %}</small>
                                <small id="assign-value" class="form-text text-muted"></small>
                            </div>
                            <span id="assign-cancel" onclick="resetAssign()"
                                  class="text-muted searchbar-category-cancel mdi mdi-close-thick"></span>
                            <ul id="dropdown-assign" class="dropdown-menu dd-nav" data-bs="dropdown">
                                <li>
                                    <button onclick="setAssignedValue(-1, this)" class="dropdown-item dropdown-item-nav" type="button">
                                        {% trans %}SearchAssignedNone{% endtrans %}
                                    </button>
                                </li>
                                <li>
                                    <button onclick="setAssignedValue(-2, this)" class="dropdown-item dropdown-item-nav" type="button">
                                        {% trans %}SearchAssignedAny{% endtrans %}
                                    </button>
                                </li>
                                {% for member in category.members %}
                                    <li>
                                        <button onclick="setAssignedValue({{ member.user.id }}, this)" class="dropdown-item dropdown-item-nav" type="button">
                                            {{ member.user.username }}
                                        </button>
                                    </li>
                                {% endfor %}
                            </ul>
                        </div>
                        <div class="searchbar-input-container">
                            <input type="text" id="searchbar-input" class="form-control" data-bs-toggle="dropdown"
                                   aria-expanded="false" placeholder="{% trans %}InputSearchNav{% endtrans %}"
                                   aria-label="Search">
                            <ul id="dropdown-category" class="dropdown-menu dropdown-menu-end dd-nav"
                                data-bs="dropdown">
                                <li>
                                    <button type="button" onclick="showDropdownAssign(event)"
                                            class="dropdown-item dropdown-item-nav">
                                        <span class="mdi mdi-account me-2"></span>
                                        {% trans %}SearchTypeAssigned{% endtrans %}
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <button type="reset" onclick="resetSearchbar()" class="btn searchbar-cancel"><span
                                class="mdi mdi-24px mdi-close-circle"></span></button>
                </form>
            </div>

            <button class="btn btn-abs-nav btn-nav" type="submit" data-bs-toggle="collapse"
                    data-bs-target="#collapseSearch"
                    aria-expanded="false" aria-controls="collapseSearch">
                <span class="mdi mdi-magnify span-nav"></span>
            </button>

            <div class="btn-group-nav">
                <button type="button" class="btn position-relative btn-abs-nav btn-nav me-1" aria-expanded="false"
                        title="Notification"
                        data-bs-toggle="modal" data-bs-target="#userModal" onclick="modalNotification()">
                    <span class="mdi mdi-bell span-nav"></span>
                    <span class="position-absolute top-100 start-100 translate-middle badge rounded-pill bg-danger notification"
                          id="btn-notification-count"></span>
                </button>
            </div>

            <div class="btn-group-nav">
                <button type="button" class="btn btn-abs-nav btn-nav me-1" data-bs-toggle="dropdown"
                        aria-expanded="false" title="Compte">
                    <span class="mdi mdi-account-circle span-nav"></span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end dd-nav">
                    <li>
                        <button class="dropdown-item dropdown-item-nav" type="button" data-bs-toggle="modal"
                                data-bs-target="#userModal" onclick="modalUser()"><span
                                    class="mdi mdi-account me-2"></span>
                            {% trans %}DropDownAccount{% endtrans %}</button>
                    </li>
                    <li>
                        <button class="dropdown-item dropdown-item-nav" type="button" data-bs-toggle="modal"
                                data-bs-target="#userModal" onclick="modalGeneral()"><span
                                    class="mdi mdi-cog-outline me-2"></span>
                            {% trans %}DropDownParameters{% endtrans %}</button>
                    </li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>

                    <li>
                        <button class="dropdown-item dropdown-item-nav" type="button" data-bs-toggle="modal"
                                data-bs-target="#userModal" onclick="modalTheme()"><span
                                    class="mdi mdi-palette-outline me-2"></span>
                            {% trans %}DropDownThemeNav{% endtrans %}</button>
                    </li>

                    <li>
                        <button class="dropdown-item dropdown-item-nav" type="button"><span
                                    class="mdi mdi-share me-2"></span>
                            {% trans %}DropDownShareNav{% endtrans %}</button>
                    </li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>

                    <li>
                        <form action="{{ url_for('account.logout') }}" method="post">
                            {{ csrf.html | raw }}
                            <button class="dropdown-item dropdown-item-nav" type="submit"><span
                                        class="mdi mdi-exit-run me-2"></span>
                                {% trans %}DropDownDisconnectNav{% endtrans %}</button>
                        </form>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</nav>

<div class="modal fade modal-edit" id="userModal" tabindex="-1" aria-labelledby="userModalLabel"
     data-bs-backdrop="static" data-bs-keyboard="false" aria-hidden="true" role="dialog">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="container-fluid d-flex">
                <div class="mt-3 mb-2 pe-2">
                    <h1 class="modal-title fs-5 mb-4 text-center">{% trans %}ParamLiModalNav{% endtrans %}</h1>
                    <ul class="list-group">
                        <li class="sidebar-li rounded" id="modal-btn-account">
                            <button class="btn-user-modal" onclick="modalUser()">
                                <span class="mdi mdi-account me-2"></span> {% trans %}UserLiModalNav{% endtrans %}
                            </button>
                        </li>
                        <li class="sidebar-li rounded" id="modal-btn-general">
                            <button class="btn-user-modal" onclick="modalGeneral()">
                                <span class="mdi mdi-cog-outline me-2"></span> {% trans %}GeneralLiModalNav{% endtrans %}
                            </button>
                        </li>
                        <li class="sidebar-li rounded" id="modal-btn-theme">
                            <button class="btn-user-modal" onclick="modalTheme()">
                                <span class="mdi mdi-palette-outline me-2"></span> {% trans %}ThemeLiModalNav{% endtrans %}
                            </button>
                        </li>
                        <li class="sidebar-li rounded" id="modal-btn-notif">
                            <button class="btn-user-modal" onclick="modalNotification()">
                                <span class="mdi mdi-bell me-2"></span> {% trans %}NotifLiModalNav{% endtrans %}
                            </button>
                        </li>
                        <li class="sidebar-li rounded" id="modal-btn-taskToDo">
                            <button class="btn-user-modal" onclick="modalTaskToDo()">
                                <span class="mdi mdi-bell me-2"></span> {% trans %}TaskToDoLiModalNav{% endtrans %}
                            </button>
                        </li>
                    </ul>
                </div>
                <div class="container-fluid p-0">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="userModalLabel">{% trans %}TitreModalNav{% endtrans %}</h1>
                        <button type="button" class="btn-close modal-theme-close" data-bs-dismiss="modal" aria-label="{{ 'CloseAriaLabel'|trans|raw }}"></button>
                    </div>
                    <div class="modal-body">
                        <div>
                            <h5 class="mb-3" id="modal-title-body"></h5>
                            <div class="d-flex align-items-center" id="modal-div-body">

                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="btn-close-modal"
                                data-bs-dismiss="modal">{% trans %}CloseModalNav{% endtrans %}</button>
                        <button type="button" class="btn btn-primary">{% trans %}SaveModalNav{% endtrans %}</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    fetchNotifications();

    let lastPage = "";
    let idCat = "";
    let idTask = "";

    function setActiveModal(newPage) {
        closePopover();
        if (lastPage !== "") {
            $('#' + lastPage).removeClass("bg-secondary")
        }

        lastPage = newPage;
        $('#' + newPage).addClass("bg-secondary");
    }

    /*  Theme */
    function modalTheme() {
        let darkTheme = getValueFromLanguage('ThemeDarkName');
        let lightTheme = getValueFromLanguage('ThemeLightName');

        setActiveModal("modal-btn-theme");
        $('#modal-title-body').html(getValueFromLanguage('LabelThemeModalNav'));
        $('#modal-div-body').html(`
            <div class="btn btn-modal-theme" role="button" onclick="setToLightMode()" title="`+ lightTheme +`">
                <div class="theme-modal-color">
                    <div class="theme-color lightPrimary"></div>
                    <div class="theme-color lightSecondary"></div>
                    <div class="theme-color lightTertiary"></div>
                    <div class="theme-color lightBG"></div>
                </div>
            </div>
            <div class="btn btn-modal-theme" role="button" onclick="setToDarkMode()" title="`+ darkTheme +`">
                <div class="theme-modal-color">
                    <div class="theme-color darkPrimary"></div>
                    <div class="theme-color darkSecondary"></div>
                    <div class="theme-color darkTertiary"></div>
                    <div class="theme-color darkBG"></div>
                </div>
            </div>
        `);
    }

    /* Account */
    function modalUser() {
        let user = data.user;
        let pseudo = getValueFromLanguage('PseudoAccount');
        let mail = getValueFromLanguage('MailAccount');
        let pass = getValueFromLanguage('PasswordAccount');
        let btn = getValueFromLanguage('ModificationPasswordAccount');

        setActiveModal("modal-btn-account");
        $('#modal-title-body').html(getValueFromLanguage('LabelAccount'));
        $('#modal-div-body').html(`
            <div class="d-flex flex-column">
                <h6>` + pseudo + `</h6>
                <p>`+ user.username +`</p>

                <h6>` + mail + `</h6>
                <p>`+ user.email +`</p>

                <h6>` + pass + `</h6>
                <button type="button" class="btn btn-abs-nav" onclick="modificationPassword()">` + btn + `</button>
            </div>
        `);
    }

    function modificationPassword() {
        let annulation = getValueFromLanguage('AnnulationModalNav');
        let save = getValueFromLanguage('SaveModalNav');
        let new_pass = getValueFromLanguage('NewPasswordAccount');
        let conf_pass = getValueFromLanguage('ConfPasswordAccount');

        $('#modal-title-body').html(getValueFromLanguage('ModificationPasswordAccount'));
        $('#modal-div-body').html(`
        <form class="form-account">
            <div class="mb-3">
                <label for="password" class="form-label">` + new_pass + `</label>
                <input type="password" id="new-password" name="password" aria-describedby="validationPassword"
                       class="form-control bg-secondary">
                <div id="validation-password" class="invalid-feedback"></div>
            </div>
            <div class="mb-3">
                <label for="password-conf" class="form-label">` + conf_pass + `</label>
                <input type="password" id="conf-password" name="password-conf" aria-describedby="validationPasswordConf"
                       class="form-control bg-secondary">
                <div id="validation-password-conf" class="invalid-feedback"></div>
            </div>
            <div class="d-flex justify-content-center">
                <button type="button" class="btn btn-secondary me-2" onclick="modalUser()">` + annulation + `</button>
                <button type="button" class="btn btn-primary" onclick="saveNewPassword()"> ` + save + `<button>
            </div>
        </form>
        `);
    }

    function saveNewPassword(){
        let userId = data.user.id;
        let pass = document.getElementById("password");
        let passConf = document.getElementById("password-conf");

        let regexMdpSpe = /^[-_*.!?#\S]+$/;
        let regexMdpMin = /^[a-z\S]+$/;
        let regexMdpMaj = /^[A-Z\S]+$/;
        let regexMdpNum = /^[0-9\S]+$/;

        if(pass.value.trim() === ""){
            showToast(getValueFromLanguage('RegexPass').replace('%size1%', 6).replace('%size2%', 128), userId, 'danger');
            return;
        }
        else if(!regexMdpSpe.test(pass.value)){
            showToast(getValueFromLanguage('RegexPass').replace('%size1%', 6).replace('%size2%', 128), userId, 'danger');
            return;
        }
        else if(!regexMdpMin.test(pass.value)){
            showToast(getValueFromLanguage('RegexPass').replace('%size1%', 6).replace('%size2%', 128), userId, 'danger');
            return;
        }
        else if(!regexMdpMaj.test(pass.value)){
            showToast(getValueFromLanguage('RegexPass').replace('%size1%', 6).replace('%size2%', 128), userId, 'danger');
            return;
        }
        else if(!regexMdpNum.test(pass.value)){
            showToast(getValueFromLanguage('RegexPass').replace('%size1%', 6).replace('%size2%', 128), userId, 'danger');
            return;
        }
        else if((pass.value.length < 6)||(pass.value.length > 128)){
            showToast(getValueFromLanguage('RegexPass').replace('%size1%', 0).replace('%size2%', 128), userId, 'danger');
            return;
        }

        if(passConf.value !== pass.value){
            showToast(getValueFromLanguage('RegexPassConf'), userId, 'danger');
            return;
        }

        changePassword(pass);
    }

    /*  General */
    function modalGeneral() {
        setActiveModal("modal-btn-general");
        $('#modal-title-body').html(`test`);
        $('#modal-div-body').html(`
            <div>

            </div>
        `);
    }

    /*  Notification and TaskToDo */
    function loadAllValues(isTasks, values) {
        let res = `<ul class="list-group list-group-flush tasks w-100" data-sortable="tasks">`;

        if (isTasks) {/* [0]: taskName; [1]: subCategoryId; [2]: taskId; [3]: DateEcheance */
            values.forEach(value => {
                res += createTaskToDo(value[0], value[1], value[2], getValueFromLanguage('LabelTaskToDoModalNav').replace('%data%',value[3]));
            });
        } else { /* [0]: categoryName; [1]: owner; [2]: creationDate; */
            values.forEach(value => {
                res += createNotification(value.id, value.category.name, value.category.owner.username,
                    getValueFromLanguage('LabelTaskToDoModalNav').replace('%data%',value.date));
            });
        }

        res += `</ul>`;
        return res;
    }

    /*  Notification */
    function modalNotification() {
        setActiveModal("modal-btn-notif");
        $('#modal-title-body').html(getValueFromLanguage('TitleNotifModalNav'));
        $('#modal-div-body').html(loadAllValues(false, invitations));
        addEventNotif();
    }

    function createNotification(invitationId, category, owner, date) {
        return `
        <li class="sidebar-li rounded p-2" id="invitation-` + invitationId + `">
            <div class="d-flex w-100 justify-content-between">
                <label class="align-items-center mt-2" >
                    ` + category + ` , ` + owner + ` , ` + date + `
                </label>
                <div class="d-flex">
                    <button type="button" class="btn position-relative btn-nav me-2 btn-modal-success" title="Notification"
                         onclick="updateInvitation(` + invitationId + `,true)">
                        <span class="mdi mdi-check span-nav"></span>
                    </button>
                    <button type="button" class="btn position-relative btn-nav me-1 btn-modal-remove" title="Notification"
                         onclick="updateInvitation(` + invitationId + `,false))">
                        <span class="mdi mdi-18px mdi-close-thick"></span>
                    </button>
                </div>
            </div>
        </li>
        `;
    }

    function removeInvitation(invitationId) {
        $("#invitation-" + invitationId).remove();
    }

    /*  TaskToDo */
    function modalTaskToDo() {
        setActiveModal("modal-btn-taskToDo");
        $('#modal-title-body').html(getValueFromLanguage('TitleTaskToDoModalNav'));
        $('#modal-div-body').html(loadAllValues(true, loadTaskToDo()));
        addEventNotif();
    }

    function createTaskToDo(taskName, subCatId, taskId, date) {
        return `
        <li class="sidebar-li rounded p-2" id="taskToDo-` + subCatId + `-` + taskId + `">
            <div class="d-flex">
                <div class="" onclick="openTaskDetails(` + subCatId + `,` + taskId + `)">
                    <label>
                        ` + taskName + ` , ` + date + `
                    </label>
                </div>
                    <a class="ms-2" data-idCat="` + subCatId + `" data-idTask="` + taskId + `" role="button"
                            data-bs="popover" data-bs-popover="taskToDo-popover" aria-label="Actions de la tâche" onclick="setTaskToDoPopoverValues(` + subCatId + `,` + taskId + `)">
                        <span class="mdi mdi-dots-horizontal"></span>
                    </a>
            </div>
        </li>
        `;
    }

    function setTaskToDoPopoverValues(subCatId, taskId) {
        idCat = subCatId;
        idTask = taskId;
    }

    function addEventNotif() {
        $("[data-bs-popover=taskToDo-popover]").popover({
            trigger: 'click',
            placement: 'right',
            customClass: 'popover',
            offset: [0, 0],
            html: true,
            sanitize: false,
            content: () => {
                let moveTrad = getValueFromLanguage('TaskToDoMoveToTaskModalNav');
                let deleteTrad = getValueFromLanguage('TaskToDoDeleteToTaskModalNav');
                return `
                <div class="btn-group-vertical" id="taskToDo-popover-` + idCat + `-` + idTask + `" role="group" aria-label="Vertical button group">
                    <button type="button" class="btn btn-sm btn-popover" onclick="moveToSubCategory(` + idCat + `,` + idTask + `)">
                            <span class="mdi mdi-archive-outline"></span>` + moveTrad + `</button>
                    <button type="button" class="btn btn-sm btn-popover" onclick="deleteTaskToDo(` + idCat + `,` + idTask + `)">
                            <span class="mdi mdi-trash-can"></span> ` + deleteTrad + ` </button>
                </div>`;
            }
        })
    }

    function closePopover() {
        let element = document.getElementById('taskToDo-popover-' + idCat + '-' + idTask);
        if (element !== null) {
            let parent = element.parentElement;
            if (parent !== null) {
                let parent_parent = parent.parentElement;
                if (parent_parent !== null) {
                    parent_parent.remove();
                }
            }
        }
    }

    function moveToSubCategory(subCatId, taskId) {
        closePopover();
        let element = document.getElementById('taskViewInfo-' + subCatId + '-' + taskId);
        element.scrollIntoView({block: "center"});
    }

    function deleteTaskToDo(subCatId, taskId) {
        $('#taskToDo-' + subCatId + '-' + taskId).remove();
        closePopover();
    }

</script>